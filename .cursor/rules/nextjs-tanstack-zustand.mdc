---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

---
description: Next.js with TanStack and Zustand
globs: *
---
# Next.js with TanStack and Zustand

Guidelines for developing Next.js applications using TanStack libraries and Zustand for state management.

<rule>
name: nextjs_tanstack_zustand
description: Standards for Next.js projects using TanStack libraries and Zustand
filters:
  # Match Next.js, React, TanStack, or Zustand related files
  - type: file_extension
    pattern: "\\.(js|jsx|ts|tsx|json)$"
  # Match configurations and components
  - type: file_name
    pattern: "^(next\\.config|tsconfig|package\\.json|.*\\.component|.*\\.hook|.*\\.store)\\."
  # Match when asking for state management solutions
  - type: intent
    pattern: "state_management_recommendation"

actions:
  - type: suggest
    message: |
      When working with this Next.js project:

      ## Project Structure
      ```
      src/
      ├── app/             # Next.js App Router
      ├── data/            # Sample data
      ├── components/      # Reusable components
      │   ├── ui/          # Generic UI components
      │   └── feature/     # Feature-specific components
      ├── lib/             # Utility functions
      ├── store/           
      ├── hooks/           # Custom hooks
      ├── types/           # TypeScript types
      └── utils/           # Helper functions
      ```

      ## State Management Patterns
      
      ### Zustand Store Pattern
      ```typescript
      // src/stores/useUserStore.ts
      import { create } from 'zustand'
      import { persist } from 'zustand/middleware'

      type UserState = {
        user: User | null
        isAuthenticated: boolean
        login: (user: User) => void
        logout: () => void
      }

      export const useUserStore = create<UserState>()(
        persist(
          (set) => ({
            user: null,
            isAuthenticated: false,
            login: (user) => set({ user, isAuthenticated: true }),
            logout: () => set({ user: null, isAuthenticated: false }),
          }),
          { name: 'user-store' }
        )
      )
      ```

      ### TanStack Query Pattern
      ```typescript
      // src/hooks/queries/useUsers.ts
      import { useQuery } from '@tanstack/react-query'
      
      export function useUsers() {
        return useQuery({
          queryKey: ['users'],
          queryFn: async () => {
            const response = await fetch('/api/users')
            if (!response.ok) {
              throw new Error('Failed to fetch users')
            }
            return response.json()
          }
        })
      }
      ```

      ## Component Pattern
      ```typescript
      // src/components/feature/UserList.tsx
      'use client'
      
      import { useUsers } from '@/hooks/queries/useUsers'
      import { useUserStore } from '@/stores/useUserStore'
      
      export function UserList() {
        const { data, isLoading, error } = useUsers()
        const isAuthenticated = useUserStore((state) => state.isAuthenticated)
        
        if (!isAuthenticated) {
          return <p>Please login to view users</p>
        }
        
        if (isLoading) return <p>Loading...</p>
        if (error) return <p>Error: {error.message}</p>
        
        return (
          <ul>
            {data?.map((user) => (
              <li key={user.id}>{user.name}</li>
            ))}
          </ul>
        )
      }
      ```

  - type: reject
    conditions:
      - pattern: "(?i)\\b(redux|recoil|jotai|mobx|context\\s+api)\\b"
        message: "This project uses Zustand for state management. Please avoid suggesting Redux, Recoil, Jotai, MobX, or Context API."
      
      - pattern: "(?i)\\b(swr|apollo|relay|urql)\\b"
        message: "This project uses TanStack Query (React Query) for data fetching. Please avoid suggesting SWR, Apollo, Relay, or URQL."
      
      - pattern: "(?i)\\b(class\\s+component)\\b"
        message: "Please use functional components with hooks rather than class components."

examples:
  - input: "How should I manage global state in this app?"
    output: "For global state management, create a Zustand store in the src/stores directory. Zustand provides a simple, hook-based API with minimal boilerplate."

  - input: "What's the best way to fetch data from the API?"
    output: "Use TanStack Query (formerly React Query) to fetch, cache, and update data. Create custom hooks in src/hooks/queries directory to encapsulate query logic."

  - input: "How should I structure a new component?"
    output: "Create functional components using TypeScript and hooks. Place reusable UI components in src/components/ui and feature-specific components in src/components/feature."

metadata:
  priority: high
  version: 1.0
</rule>
